generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userid             Int                 @id @default(autoincrement())
  username           String              @unique @db.VarChar(255)
  password           String              @db.VarChar(255)
  email              String              @unique @db.VarChar(255)
  phone              String?             @unique @db.VarChar(15)
  role               String?             @default("普通用户") @db.VarChar(50)
  languagepreference String?             @db.VarChar(50)
  registrationdate   DateTime?           @default(now()) @db.Timestamp(6)
  lastlogindate      DateTime?           @db.Timestamp(6)
  achievements       achievements[]
  comments           comments[]
  discussionthreads  discussionthreads[]
  episode            episode[]
  favorites          favorites[]
  learningpaths      learningpaths[]
  listeninghistory   listeninghistory[]
  notifications      notifications[]
  ratings            ratings[]
  speechrecognition  speechrecognition[]
  studygroups        studygroups[]
  subscriptions      subscriptions[]
  userprofile        userprofile?
  vocabulary         vocabulary[]
}

model achievements {
  achievementid   Int       @id @default(autoincrement())
  userid          Int?
  achievementname String    @db.VarChar(255)
  achievementdate DateTime? @default(now()) @db.Timestamp(6)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model advertisements {
  adid      Int       @id @default(autoincrement())
  adtitle   String    @db.VarChar(255)
  adcontent String?
  adurl     String?   @db.VarChar(255)
  startdate DateTime? @default(now()) @db.Timestamp(6)
  enddate   DateTime? @db.Timestamp(6)
}

model category {
  categoryid       Int        @id @default(autoincrement())
  name             String     @unique @db.VarChar(255)
  coverurl         String     @default("default_cover_url") @db.VarChar(255)
  description      String?
  parentcategoryid Int?
  category         category?  @relation("categoryTocategory", fields: [parentcategoryid], references: [categoryid], onUpdate: NoAction)
  other_category   category[] @relation("categoryTocategory")
  episode          episode[]
}

model comments {
  commentid   Int       @id @default(autoincrement())
  userid      Int?
  podcastid   Int?
  commenttext String?
  commentdate DateTime? @default(now()) @db.Timestamp(6)
  episode     episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model discussionthreads {
  threadid      Int       @id @default(autoincrement())
  podcastid     Int?
  userid        Int?
  threadtitle   String    @db.VarChar(255)
  threadcontent String?
  postdate      DateTime? @default(now()) @db.Timestamp(6)
  episode       episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User          User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model episode {
  episodeid         Int                 @id @default(autoincrement())
  title             String              @db.VarChar(255)
  coverurl          String              @default("default_cover_url") @db.VarChar(255)
  description       String?
  audiourl          String              @db.VarChar(255)
  duration          String?             @db.VarChar(10)
  categoryid        Int?
  uploaderid        Int?
  createdat         DateTime?           @default(now()) @db.Timestamp(6)
  updatedat         DateTime?           @db.Timestamp(6)
  status            String?             @default("已发布") @db.VarChar(50)
  comments          comments[]
  discussionthreads discussionthreads[]
  category          category?           @relation(fields: [categoryid], references: [categoryid], onUpdate: NoAction)
  User              User?               @relation(fields: [uploaderid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
  favorites         favorites[]
  listeninghistory  listeninghistory[]
  quizzes           quizzes[]
  ratings           ratings[]
  speechrecognition speechrecognition[]
  subtitles         subtitles[]
}

model favorites {
  favoriteid   Int       @id @default(autoincrement())
  userid       Int?
  podcastid    Int?
  favoritedate DateTime? @default(now()) @db.Timestamp(6)
  episode      episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model learningpaths {
  pathid       Int       @id @default(autoincrement())
  userid       Int?
  pathname     String    @db.VarChar(255)
  creationdate DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model listeninghistory {
  historyid  Int       @id @default(autoincrement())
  userid     Int?
  podcastid  Int?
  listendate DateTime? @default(now()) @db.Timestamp(6)
  episode    episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User       User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  notificationid   Int       @id @default(autoincrement())
  userid           Int?
  notificationtext String?
  notificationdate DateTime? @default(now()) @db.Timestamp(6)
  isread           Boolean?  @default(false)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model quizzes {
  quizid        Int      @id @default(autoincrement())
  podcastid     Int?
  question      String
  options       Json?
  correctanswer String   @db.VarChar(255)
  episode       episode? @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings {
  ratingid    Int       @id @default(autoincrement())
  userid      Int?
  podcastid   Int?
  ratingvalue Int?
  ratingdate  DateTime? @default(now()) @db.Timestamp(6)
  episode     episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model speechrecognition {
  recognitionid   Int       @id @default(autoincrement())
  userid          Int?
  podcastid       Int?
  speechtext      String?
  accuracyscore   Float?
  recognitiondate DateTime? @default(now()) @db.Timestamp(6)
  episode         episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model studygroups {
  groupid      Int       @id @default(autoincrement())
  groupname    String    @db.VarChar(255)
  creatorid    Int?
  creationdate DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [creatorid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model subscriptions {
  subscriptionid   Int       @id @default(autoincrement())
  userid           Int?
  subscriptiontype String    @db.VarChar(50)
  startdate        DateTime? @default(now()) @db.Timestamp(6)
  enddate          DateTime? @db.Timestamp(6)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model subtitles {
  subtitleid Int      @id @default(autoincrement())
  podcastid  Int?
  text       String?
  starttime  String?  @db.VarChar(10)
  endtime    String?  @db.VarChar(10)
  episode    episode? @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
}

model userprofile {
  userid     Int     @id
  nickname   String? @db.VarChar(255)
  avatarurl  String? @default("default_avatar_url") @db.VarChar(255)
  bio        String?
  learnlevel String? @db.VarChar(50)
  User       User    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model vocabulary {
  vocabularyid Int       @id @default(autoincrement())
  userid       Int?
  word         String    @db.VarChar(255)
  definition   String?
  addeddate    DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}
