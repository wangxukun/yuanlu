generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userid             String               @id @default(cuid())
  phone              String               @unique @db.VarChar(15)
  password           String               @db.VarChar(255)
  role               String?              @default("USER") @db.VarChar(50)
  languagePreference String?              @default("zh-CN") @db.VarChar(50)
  createAt           DateTime?            @default(now()) @db.Timestamptz(6)
  updateAt           DateTime?            @updatedAt @db.Timestamptz(6)
  isOnline           Boolean?             @default(false)
  lastActiveAt       DateTime?            @db.Timestamptz(6)
  isCommentAllowed   Boolean?             @default(true)
  achievements       achievements[]
  comments           comments[]
  discussion_threads discussion_threads[]
  episode            episode[]
  episode_favorites  episode_favorites[]
  podcast_favorites  podcast_favorites[]
  learning_paths     learning_paths[]
  listening_history  listening_history[]
  notifications      notifications[]
  ratings            ratings[]
  speech_recognition speech_recognition[]
  study_groups       study_groups[]
  subscriptions      subscriptions[]
  user_profile       user_profile?
  vocabulary         vocabulary[]
}

model achievements {
  achievementid   Int       @id @default(autoincrement())
  userid          String?
  achievementName String    @db.VarChar(255)
  achievementDate DateTime? @default(now()) @db.Timestamptz(6)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model advertisements {
  adid      Int       @id @default(autoincrement())
  adTitle   String    @db.VarChar(255)
  adContent String?
  adUrl     String?   @db.VarChar(255)
  startAt   DateTime? @default(now()) @db.Timestamptz(6)
  endAt     DateTime? @db.Timestamptz(6)
}

model podcast {
  podcastid         String              @id @default(cuid())
  title             String              @unique @db.VarChar(255)
  coverUrl          String              @default("default_cover_url") @db.VarChar(255)
  coverFileName     String?             @db.VarChar(255)
  platform          String?             @db.VarChar(255)
  description       String?
  parentPodcastid   String?
  podcast           podcast?            @relation("podcastTopodcast", fields: [parentPodcastid], references: [podcastid], onUpdate: NoAction)
  otherPodcast      podcast[]           @relation("podcastTopodcast")
  episode           episode[]
  podcast_favorites podcast_favorites[]
  podcast_tags      podcast_tags[]
}

model comments {
  commentid   Int       @id @default(autoincrement())
  userid      String?
  episodeid   String?
  commentText String?
  commentAt   DateTime? @default(now()) @db.Timestamptz(6)
  episode     episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model discussion_threads {
  threadid      Int       @id @default(autoincrement())
  episodeid     String?
  userid        String?
  threadTitle   String    @db.VarChar(255)
  threadContent String?
  postAt        DateTime? @default(now()) @db.Timestamptz(6)
  episode       episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User          User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model episode {
  episodeid          String               @id @default(cuid())
  title              String               @db.VarChar(255)
  coverUrl           String               @default("default_cover_url") @db.VarChar(255)
  coverFileName      String?              @db.VarChar(255)
  description        String?
  audioUrl           String               @db.VarChar(255)
  audioFileName      String?              @db.VarChar(255)
  subtitleEnUrl      String?              @db.VarChar(255)
  subtitleEnFileName String?              @db.VarChar(255)
  subtitleZhUrl      String?              @db.VarChar(255)
  subtitleZhFileName String?              @db.VarChar(255)
  duration           Int                  @default(0)
  podcastid          String?
  uploaderid         String?
  publishAt          DateTime             @default(dbgenerated("CURRENT_DATE")) @db.Date
  createAt           DateTime?            @default(now()) @db.Timestamptz(6)
  updateAt           DateTime?            @db.Timestamptz(6)
  status             String?              @default("unpublished") @db.VarChar(50)
  isExclusive        Boolean?             @default(false)
  isCommentEnabled   Boolean?             @default(true)
  comments           comments[]
  discussion_threads discussion_threads[]
  podcast            podcast?             @relation(fields: [podcastid], references: [podcastid], onUpdate: NoAction)
  User               User?                @relation(fields: [uploaderid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
  episode_favorites  episode_favorites[]
  listening_history  listening_history[]
  quizzes            quizzes[]
  ratings            ratings[]
  speech_recognition speech_recognition[]
  episode_tags       episode_tags[]
}

model episode_favorites {
  favoriteid   Int       @id @default(autoincrement())
  userid       String?
  episodeid    String?
  favoriteDate DateTime? @default(now()) @db.Timestamptz(6)
  episode      episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userid, episodeid]) // 防止重复收藏
}

model podcast_favorites {
  favoriteid   Int       @id @default(autoincrement())
  userid       String?
  podcastid    String?
  favoriteDate DateTime? @default(now()) @db.Timestamptz(6)
  podcast      podcast?  @relation(fields: [podcastid], references: [podcastid], onDelete: Cascade, onUpdate: NoAction)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userid, podcastid]) // 防止重复收藏
}

model tag {
  tagid        String         @id @default(cuid())
  name         String         @unique @db.VarChar(50)
  createAt     DateTime       @default(now()) @db.Timestamptz(6)
  podcast_tags podcast_tags[]
  episode_tags episode_tags[]
}

model podcast_tags {
  id        Int     @id @default(autoincrement())
  podcastid String
  tagid     String
  podcast   podcast @relation(fields: [podcastid], references: [podcastid])
  tag       tag     @relation(fields: [tagid], references: [tagid])

  @@unique([podcastid, tagid])
}

model episode_tags {
  id        Int     @id @default(autoincrement())
  episodeid String
  tagid     String
  episode   episode @relation(fields: [episodeid], references: [episodeid])
  tag       tag     @relation(fields: [tagid], references: [tagid])

  @@unique([episodeid, tagid])
}

model learning_paths {
  pathid     Int       @id @default(autoincrement())
  userid     String?
  pathName   String    @db.VarChar(255)
  creationAt DateTime? @default(now()) @db.Timestamptz(6)
  User       User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model listening_history {
  historyid Int       @id @default(autoincrement())
  userid    String?
  episodeid String?
  listenAt  DateTime? @default(now()) @db.Timestamptz(6)
  episode   episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User      User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  notificationid   Int       @id @default(autoincrement())
  userid           String?
  notificationText String?
  notificationAt   DateTime? @default(now()) @db.Timestamptz(6)
  isRead           Boolean?  @default(false)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model quizzes {
  quizid        Int      @id @default(autoincrement())
  episodeid     String?
  question      String
  options       Json?
  correctAnswer String   @db.VarChar(255)
  episode       episode? @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings {
  ratingid    Int       @id @default(autoincrement())
  userid      String?
  episodeid   String?
  ratingValue Int?
  ratingDate  DateTime? @default(now()) @db.Timestamptz(6)
  episode     episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model speech_recognition {
  recognitionid   Int       @id @default(autoincrement())
  userid          String?
  episodeid       String?
  speechText      String?
  accuracyScore   Float?
  recognitionDate DateTime? @default(now()) @db.Timestamptz(6)
  episode         episode?  @relation(fields: [episodeid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model study_groups {
  groupid    Int       @id @default(autoincrement())
  groupName  String    @db.VarChar(255)
  creatorid  String?
  creationAt DateTime? @default(now()) @db.Timestamptz(6)
  User       User?     @relation(fields: [creatorid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model subscriptions {
  subscriptionid   Int       @id @default(autoincrement())
  userid           String?
  subscriptionType String    @db.VarChar(50)
  startDate        DateTime? @default(now()) @db.Timestamptz(6)
  endDate          DateTime? @db.Timestamptz(6)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model user_profile {
  userid         String  @id
  nickname       String? @db.VarChar(255)
  avatarUrl      String? @default("default_avatar_url") @db.VarChar(255)
  avatarFileName String? @db.VarChar(255)
  email          String? @db.VarChar(255)
  bio            String?
  learnLevel     String? @db.VarChar(50)
  User           User    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model vocabulary {
  vocabularyid Int       @id @default(autoincrement())
  userid       String?
  word         String    @db.VarChar(255)
  definition   String?
  addedDate    DateTime? @default(now()) @db.Timestamptz(6)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model captcha {
  id        String   @id @default(cuid())
  code      String
  answer    String
  expiresAt DateTime @db.Timestamptz(3)
  createAt  DateTime @default(now()) @db.Timestamptz(3)
}

model sms_code {
  id       Int      @id @default(autoincrement())
  phone    String   @db.VarChar(15)
  code     String   @db.VarChar(6)
  createAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
}
