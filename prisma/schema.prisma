generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userid             Int                  @id @default(autoincrement())
  phone              String               @unique @db.VarChar(15)
  password           String               @db.VarChar(255)
  role               String?              @default("普通用户") @db.VarChar(50)
  languagepreference String?              @db.VarChar(50)
  registrationdate   DateTime?            @default(now()) @db.Timestamp(6)
  lastlogindate      DateTime?            @db.Timestamp(6)
  achievements       achievements[]
  comments           comments[]
  discussion_threads discussion_threads[]
  episode            episode[]
  favorites          favorites[]
  learning_paths     learning_paths[]
  listening_history  listening_history[]
  notifications      notifications[]
  ratings            ratings[]
  speech_recognition speech_recognition[]
  study_groups       study_groups[]
  subscriptions      subscriptions[]
  user_profile       user_profile?
  vocabulary         vocabulary[]
}

model achievements {
  achievementid   Int       @id @default(autoincrement())
  userid          Int?
  achievementname String    @db.VarChar(255)
  achievementdate DateTime? @default(now()) @db.Timestamp(6)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model advertisements {
  adid      Int       @id @default(autoincrement())
  adtitle   String    @db.VarChar(255)
  adcontent String?
  adurl     String?   @db.VarChar(255)
  startdate DateTime? @default(now()) @db.Timestamp(6)
  enddate   DateTime? @db.Timestamp(6)
}

model category {
  categoryid       Int        @id @default(autoincrement())
  name             String     @unique @db.VarChar(255)
  coverurl         String     @default("default_cover_url") @db.VarChar(255)
  description      String?
  parentcategoryid Int?
  category         category?  @relation("categoryTocategory", fields: [parentcategoryid], references: [categoryid], onUpdate: NoAction)
  other_category   category[] @relation("categoryTocategory")
  episode          episode[]
}

model comments {
  commentid   Int       @id @default(autoincrement())
  userid      Int?
  podcastid   Int?
  commenttext String?
  commentdate DateTime? @default(now()) @db.Timestamp(6)
  episode     episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model discussion_threads {
  threadid      Int       @id @default(autoincrement())
  podcastid     Int?
  userid        Int?
  threadtitle   String    @db.VarChar(255)
  threadcontent String?
  postdate      DateTime? @default(now()) @db.Timestamp(6)
  episode       episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User          User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model episode {
  episodeid          Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  coverurl           String               @default("default_cover_url") @db.VarChar(255)
  description        String?
  audiourl           String               @db.VarChar(255)
  duration           String?              @db.VarChar(10)
  categoryid         Int?
  uploaderid         Int?
  createdat          DateTime?            @default(now()) @db.Timestamp(6)
  updatedat          DateTime?            @db.Timestamp(6)
  status             String?              @default("已发布") @db.VarChar(50)
  comments           comments[]
  discussion_threads discussion_threads[]
  category           category?            @relation(fields: [categoryid], references: [categoryid], onUpdate: NoAction)
  User               User?                @relation(fields: [uploaderid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
  favorites          favorites[]
  listening_history  listening_history[]
  quizzes            quizzes[]
  ratings            ratings[]
  speech_recognition speech_recognition[]
  subtitles          subtitles[]
}

model favorites {
  favoriteid   Int       @id @default(autoincrement())
  userid       Int?
  podcastid    Int?
  favoritedate DateTime? @default(now()) @db.Timestamp(6)
  episode      episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model learning_paths {
  pathid       Int       @id @default(autoincrement())
  userid       Int?
  pathname     String    @db.VarChar(255)
  creationdate DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model listening_history {
  historyid  Int       @id @default(autoincrement())
  userid     Int?
  podcastid  Int?
  listendate DateTime? @default(now()) @db.Timestamp(6)
  episode    episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User       User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model notifications {
  notificationid   Int       @id @default(autoincrement())
  userid           Int?
  notificationtext String?
  notificationdate DateTime? @default(now()) @db.Timestamp(6)
  isread           Boolean?  @default(false)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model quizzes {
  quizid        Int      @id @default(autoincrement())
  podcastid     Int?
  question      String
  options       Json?
  correctanswer String   @db.VarChar(255)
  episode       episode? @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ratings {
  ratingid    Int       @id @default(autoincrement())
  userid      Int?
  podcastid   Int?
  ratingvalue Int?
  ratingdate  DateTime? @default(now()) @db.Timestamp(6)
  episode     episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User        User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model speech_recognition {
  recognitionid   Int       @id @default(autoincrement())
  userid          Int?
  podcastid       Int?
  speechtext      String?
  accuracyscore   Float?
  recognitiondate DateTime? @default(now()) @db.Timestamp(6)
  episode         episode?  @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
  User            User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model study_groups {
  groupid      Int       @id @default(autoincrement())
  groupname    String    @db.VarChar(255)
  creatorid    Int?
  creationdate DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [creatorid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model subscriptions {
  subscriptionid   Int       @id @default(autoincrement())
  userid           Int?
  subscriptiontype String    @db.VarChar(50)
  startdate        DateTime? @default(now()) @db.Timestamp(6)
  enddate          DateTime? @db.Timestamp(6)
  User             User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model subtitles {
  subtitleid Int      @id @default(autoincrement())
  podcastid  Int?
  text       String?
  starttime  String?  @db.VarChar(10)
  endtime    String?  @db.VarChar(10)
  episode    episode? @relation(fields: [podcastid], references: [episodeid], onDelete: Cascade, onUpdate: NoAction)
}

model user_profile {
  userid     Int     @id
  nickname   String? @db.VarChar(255)
  avatarurl  String? @default("default_avatar_url") @db.VarChar(255)
  email      String? @db.VarChar(255)
  bio        String?
  learnlevel String? @db.VarChar(50)
  User       User    @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model vocabulary {
  vocabularyid Int       @id @default(autoincrement())
  userid       Int?
  word         String    @db.VarChar(255)
  definition   String?
  addeddate    DateTime? @default(now()) @db.Timestamp(6)
  User         User?     @relation(fields: [userid], references: [userid], onDelete: Cascade, onUpdate: NoAction)
}

model captcha {
  id        String   @id @default(cuid()) // 唯一标识符，使用 cuid() 函数生成默认值
  code      String // 用户看到并输入的验证码字符串
  answer    String // 验证码的答案（用于验证用户输入是否正确）
  expiresAt DateTime // 验证码过期时间，用于判断验证码是否有效
  createdAt DateTime @default(now()) // 创建时间，默认值为当前时间
}
